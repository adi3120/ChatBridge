Transport layer

Provides transparent transfer of data between end hosts
Encapsulates application data into segment
Provides layer 4 header to data
provides/not services to applications
Services :
	Reliable data transfer
	Error recovery
	data sequencing
	Flow control
Provide layer 4 addressing -> Port number
	Identify app layer protocol
	provide session multiplexing
	HTTP : 80
	FTP : 20/21
	Designated by IANA
		Well known port numbers -> 0 - 1023, HTTP/FTP
		Registered port numbers -> 1024 - 49151, Registeration required
		Ephemeral/private/dynamic -> 49152 - 65535, Source ports

TCP

Connection oriented
	Before sending data-> connection established -> data exchange begins

	TCP 3 way handshake

	Forward acknowledgement -> ACK = SourceSYN +1
	Hosts set random ISN

	TCP Connection Termination - 4 way handshake
	________________
	A      |      B
	-------|--------
	FIN->  |   
	       |   <-ACK
	       |   <-FIN
	ACK->  |
	----------------
	
	TCP retransmission -> Timer

Reliable Comm
	Destination host must acknowledge received PDU
	Sent again
Provides Segmenting
	for arranging
Provides flow control
	Increase decrease data transfer rate

	Acknowledging every single segment no matter what size -> INEFFICIENT
	TCP Header -> Window size -> More data to sent before an acknowledgement is required
	A sliding window can be used to dynamically adjust how large the window size is

	window size is increased until a packet is dropped
	window size is decreased until stable
	again increased slowly


TCP Header

1) Source port - 16 bits - 2 bytes - 2^16 available port numbers = 65536
2) Destination port - 16 bits - 2 bytes - 2^16 available port numbers = 65536
3) Sequence number - 32 bits - 4 bytes - Provide sequencing and reliable communication
4) Acknowledgement number - 32 bits - 4 bytes - Provide sequencing and reliable communication
5) data offset - 4 bits
6) Reserved - 3 bits
7) Flag bits - 8 bits - Establish and terminate connection
	ACK - 1 bit
	SIN - 1 bit
	FIN - 1 bit
8) Window size - Flow control
9) Checksum
10) Urgent pointer



UDP

Not Connection oriented
	Sending host does not establish a connection with the destination host before sending data
	Data is simply sent
Not provide Reliable connection
	No acknowledgements are sent
	If segment lost -> no mechanism to retransmit it
	Segments are sent 'Best-effort'
	No gurantee of delivery
Not provide sequencing
	if out of order, no mechanism to put back in order
Not provide flow control
	no window size

UDP header

1) Source port - 16 bits - 2 byte - 65536
2) Destination port - 16 bits - 2 byte - 65536
3) Length - 16 bits
4) Checksum - 16 bits


Use case
TCP
	more Overhead
	downloading file 
	File sharing
UDP 
	Less overhead
	real-time voice and video
	Delay sensitive
	TFTP -> provide reliability within the application

TCP & UDP
	DNS

Port Numbers
_____________
TCP     PORT
-------------
FTP	20/21 F - 20
SSH	22    ss - 22
Telnet	23    tel-teis-23
SMTP	25    SIMP-P-pachhis-25
HTTP	80    hattap - atti - eighty
POP3	110   
HTTPS	443  
--------------

____________________
UDP		PORT
--------------------
DHCP Server	67      
DHCP Client 	68
TFTP		69
SNMP agent 	161
SNMP		162
Syslog		514
---------------------

___________________
TCP & UDP     Port
-------------------
DNS	      53
-------------------





